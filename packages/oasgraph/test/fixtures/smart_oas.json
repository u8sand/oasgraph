{
	"openapi": "3.0.0",
	"info": {
		"title": "Example API",
		"description": "An API to test converting Open API Specs 3.0 to GraphQL",
		"version": "1.0.0",
		"termsOfService": "http://example.com/terms/",
		"contact": {
			"name": "Erik Wittern",
			"url": "http://www.example.com/support",
			"email": "witternj@us.ibm.com"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"externalDocs": {
		"url": "http://example.com/docs",
		"description": "Some more natural language description."
	},
	"tags": [{
		"name": "test",
		"description": "Indicates this API is for testing"
	}],
	"servers": [
		{
			"url": "http://localhost:{port}/{basePath}",
			"description": "The location of the local test server.",
			"variables": {
				"port": {
					"default": "3001"
				},
				"basePath": {
					"default": "api"
				}
			}
		}
	],
	"paths": {
		"/users": {
			"get": {
				"operationId": "getUsers",
				"description": "Return a list of users.",
				"parameters": [{
					"name": "limit",
					"in": "query",
					"required": true,
					"schema": {
						"type": "integer"
					},
					"description": "Limit of the number of users to return."
				}],
				"responses": {
					"202": {
						"description": "A list of users.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/user"
									}
								}
							}
						},
						"x-responseValueType": "http://example.org/user"
					}
				}
			},
			"post": {
				"operationId": "postUser",
				"description": "Create a new user in the system.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/user"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "The posted user.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/user"
								}
							}
						},
						"x-responseValueType": "http://example.org/user"
					}
				}
			}
		},
		"/users/{username}": {
			"get": {
				"operationId": "getUserByUsername",
				"description": "Returns a user from the system.",
				"parameters": [{
					"name": "username",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string"
					},
          "description": "Identifier of a user.",
          "x-parameterValueType": "http://example.org/username"
				}],
				"responses": {
					"200": {
						"description": "A user represents a natural person.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/user"
								}
							}
						},
						"x-responseValueType": "http://example.org/user",
						"x-links": {
							"employerCompany": {
								"$ref": "#/components/x-links/EmployerCompany"
							},
							"author": {
								"$ref": "#/components/x-links/Author"
							}
						}
					}
				}
			}
		},
		"/users/{username}/car": {
			"get": {
				"operationId": "getUserCar",
				"description": "Returns a car to test nesting of sub operations",
				"parameters": [{
					"name": "username",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string"
					},
					"description": "Identifier of a user."
				}],
				"responses": {
					"200": {
						"description": "A car of a user.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/car"
								}
							}
						},
						"x-responseValueType": "http://example.org/car"
					}
				}
			}
		},
		"/companies/{id}": {
			"get": {
				"operationId": "getCompanyById",
				"description": "Returns the profile of a company with the given ID.",
				"parameters": [{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string"
          },
          "x-parameterValueType": "http://example.org/companyId"
				}],
				"responses": {
					"200": {
						"description": "A company profile.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/company"
								}
							}
						},
						"x-responseValueType": "http://example.org/company",
						"x-links": {
							"ceoUser": {
								"$ref": "#/components/x-links/CeoUser"
							}
						}
					}
				}
			}
		},
		"/cookie": {
			"get": {
				"operationId": "getCookie",
				"description": "Used to test cookies.",
				"parameters": [{
					"name": "cookie_type",
					"in": "cookie",
					"required": true,
					"schema": {
						"type": "string",
						"enum": [
              "chocolate chip",
							"oatmeal raisin",
							"sugar"
            ]
					}
				},
				{
					"name": "cookie_size",
					"in": "cookie",
					"required": true,
					"schema": {
						"type": "string",
						"enum": [
							"bite-sized",
							"regular",
							"mega-sized"
						]
					}
				}],
				"responses": {
					"200": {
						"description": "You got a cookie!",
						"content": {
							"text/plain": {
								"schema": {
									"description": "Used to test generation of object types with matching schema.",
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/copier": {
			"get": {
				"operationId": "getCopier",
				"description": "Used to test link parameters with variables",
				"parameters": [{
					"name": "query",
					"in": "query",
					"schema": {
						"type": "string"
          },
          "x-parameterValueType": "http://example.org/query"
				}],
				"responses": {
					"200": {
						"description": "Success!",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"body": {
											"type": "string"
										}
									}
								}
							}
						},
						"x-responseValueType": "http://example.org/copy",
						"x-links": {
							"basicLink": {
								"$ref": "#/components/x-links/BasicLink"
							},
							"constantLink": {
								"$ref": "#/components/x-links/ConstantLink"
							},
							"variableLink": {
								"$ref": "#/components/x-links/VariableLink"
							},
							"everythingLink": {
								"$ref": "#/components/x-links/EverythingLink"
							}
						}
					}
				}
			}
		},
		"/cleanDesks": {
			"get": {
				"operationId": "getNumberOfCleanDesks",
				"description": "Used to test generation of object types with matching schema.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Number of clean desks.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/dirtyDesks": {
			"get": {
				"operationId": "getNumberOfDirtyDesks",
				"description": "Used to test generation of object types with matching schema.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Number of dirty desks.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/bonuses": {
			"get": {
				"operationId": "getBonuses",
				"description": "Used to test empty responses",
				"parameters": [],
				"responses": {
					"204": {
						"description": "Used to test empty responses"
					}
				}
			}
		},
		"/offices/{id}": {
			"get": {
				"operationId": "getOffice",
				"description": "Return an office.",
				"parameters": [{
					"name": "id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "integer"
					},
					"description": "Office ID"
				},
				{
          "name": "accept",
          "in": "header",
          "description": "Describes the format of the return values. By default, the return type is `text/plain` and the return value is the two-letter language code for the identified language, for example, `en` for English or `es` for Spanish. To retrieve a JSON object that contains a ranking of identified languages with confidence scores, set the accept header parameter to `application/json`.",
          "required": false,
          "schema": {
            "type": "string",
            "enum": [
              "application/json",
              "text/plain"
            ],
            "default": "text/plain"
          }
        }],
				"responses": {
					"200": {
						"description": "An office.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/office"
								}
							},
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						},
						"x-responseValueType": "http://example.org/office",
						"x-links": {
							"owner": {
								"$ref": "#/components/x-links/Employee"
							},
							"company": {
								"$ref": "#/components/x-links/EmployerCompany"
							}
						}
					}
				}
			}
		},
		"/papers": {
			"get": {
				"operationId": "getPapers",
				"description": "Return a list of papers. Endpoint to test 2XX status code.",
				"responses": {
					"2XX": {
						"description": "A list of papers.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/paper"
									}
								}
							}
						},
						"x-responseValueType": "http://example.org/paper"
					}
				}
			},
			"post": {
				"operationId": "postPaper",
				"description": "Create a new paper in the system. Endpoint to test non-application/json request and response bodies.",
				"requestBody": {
					"content": {
						"text/plain": {
							"schema": {
								"type": "string"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "The posted paper.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						},
						"x-responseValueType": "http://example.org/paper"
					}
				}
			}
		},
		"/products": {
			"post": {
				"operationId": "post-product-with-id",
				"description": "Endpoint to test unsanitized parameters and data.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/product-with-id"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "A product.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/product-with-id"
								}
							}
						},
						"x-responseValueType": "http://example.org/product"
					}
				}
			}
		},
		"/products/{product-id}": {
			"get": {
				"operationId": "get-product-with-id",
				"description": "Another endpoint to test unsanitized parameters and data.",
				"parameters": [{
						"name": "product-id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "product-tag",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "A product.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/product-with-id"
								}
							}
						},
						"x-responseValueType": "http://example.org/product",
						"x-links": {
							"reviews": {
								"$ref": "#/components/x-links/Reviews"
							},
							"reviewsWithOperationRef": {
								"$ref": "#/components/x-links/ReviewsWithOperationRef"
							}
						}
					}
				},
				"security": []
			}
		},
		"/products/{id}/reviews": {
			"get": {
				"operationId": "getProductReviews",
				"description": "Obtain reviews for a product.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
            },
            "x-parameterValueType": "http://example.org/productId"
					},
					{
						"name": "product-tag",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
              "default": "sport"
						},
            "x-parameterValueType": "http://example.org/productTag"
					}
				],
				"responses": {
					"200": {
						"description": "List of review texts",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "object",
                    "properties": {
                      "text": {
                        "type": "string"
                      },
                      "timestamp": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
									}
								}
							}
						},
						"x-responseValueType": "http://example.org/review"
					}
				}
			}
		},
		"/patents/{patent-id}": {
			"get": {
				"operationId": "get-patent-with-id",
				"description": "An endpoint to test authentication.",
				"parameters": [{
					"name": "patent-id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string"
          },
          "x-parameterValueType": "http://example.org/patentId"
				}],
				"responses": {
					"200": {
						"description": "A product.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/patent-with-id"
								}
							}
						},
						"x-responseValueType": "http://example.org/product",
						"x-links": {
							"inventor": {
								"$ref": "#/components/x-links/Inventor"
							}
						}
					}
				},
				"security": [
					{
						"example_api_basic_protocol": []
					},
					{
						"example_api_key_protocol_2": []
					}
				]
			}
		},
		"/projects/{project-id}": {
			"get": {
				"operationId": "get-project-with-id",
				"description": "Another endpoint to test authentication.",
				"parameters": [{
					"name": "project-id",
					"in": "path",
					"required": true,
					"schema": {
						"type": "integer"
					}
				}],
				"responses": {
					"200": {
						"description": "A project.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/project-with-id"
								}
							}
						},
						"x-responseValueType": "http://example.org/project",
						"x-links": {
							"projectLead": {
								"$ref": "#/components/x-links/ProjectLead"
							},
							"patent": {
								"$ref": "#/components/x-links/Patent"
							}
						}
					}
				},
				"security": [
					{
						"example_api_key_protocol": []
					},
					{
						"example_api_key_protocol_2": []
					}
				]
			}
		},
		"/projects": {
			"post": {
				"operationId": "post-project-with-id",
				"description": "An endpoint to test authenticated POST requests.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/project-with-id"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "A product.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/project-with-id"
								}
							}
						},
						"x-responseValueType": "http://example.org/product",
						"x-links": {
							"ProjectLead": {
								"$ref": "#/components/x-links/ProjectLead"
							}
						}
					}
				},
        "security": [
					{
						"example_api_key_protocol": []
					},
					{
						"example_api_key_protocol_2": []
					}
				]
			}
		},
		"/scanner": {
			"get": {
				"operationId": "getScanner",
				"description": "Used to test link parameters with variables",
				"parameters": [{
					"name": "query",
					"in": "query",
					"schema": {
						"type": "string"
					}
				}],
				"responses": {
					"200": {
						"description": "Success!",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"body": {
											"type": "string"
										}
									}
								}
							}
						},
						"x-responseValueType": "http://example.org/copy",
						"x-links": {
							"basicLink": {
								"$ref": "#/components/x-links/BasicLink"
							},
							"constantLink": {
								"$ref": "#/components/x-links/ConstantLink"
							},
							"variableLink": {
								"$ref": "#/components/x-links/VariableLink"
							},
							"everythingLink": {
								"$ref": "#/components/x-links/EverythingLink"
							}
						}
					}
				}
			}
		},
		"/scanner/{path}": {
			"post": {
				"operationId": "postScanner",
				"description": "Used to test link parameters with variables",
				"parameters": [{
					"name": "query",
					"in": "query",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "path",
					"in": "path",
					"required": true,
					"schema": {
						"type": "string"
					}
				}],
				"requestBody": {
					"content": {
						"text/plain": {
							"schema": {
								"type": "string"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success!",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"body": {
											"type": "string"
										}
									}
								}
							}
						},
						"x-responseValueType": "http://example.org/copy",
						"x-links": {
							"basicLink": {
								"$ref": "#/components/x-links/BasicLink"
							},
							"constantLink": {
								"$ref": "#/components/x-links/ConstantLink"
							},
							"variableLink": {
								"$ref": "#/components/x-links/VariableLink"
							},
							"everythingLink": {
								"$ref": "#/components/x-links/EverythingLink"
							},
							"everythingLink2": {
								"$ref": "#/components/x-links/EverythingLink2"
							}
						}
					}
				}
			}
		},
		"/snack": {
			"get": {
				"operationId": "getSnack",
				"description": "Endpoint to test sending of headers.",
				"parameters": [{
					"name": "snack_type",
					"in": "header",
					"required": true,
					"schema": {
						"type": "string",
						"enum": [
              "chips",
              "soda"
            ]
					}
				},
				{
					"name": "snack_size",
					"in": "header",
					"required": true,
					"schema": {
						"type": "string",
						"enum": [
              "large",
              "small"
            ]
					}
				}],
				"responses": {
					"200": {
						"description": "Status message.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"description": "What snack is offered."
								}
							}
						},
						"x-responseValueType": "http://example.org/status"
					}
				}
			}
		},
		"/status": {
			"get": {
				"operationId": "get-Status",
				"description": "Endpoint to test sending of options.",
				"parameters": [{
					"name": "limit",
					"in": "query",
					"required": true,
					"schema": {
						"type": "integer"
					}
				}],
				"responses": {
					"200": {
						"description": "Status message.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string",
									"description": "What the status is."
								}
							}
						}
					},
					"x-responseValueType": "http://example.org/status"
				}
			},
			"post": {
				"description": "Endpoint to test placeholder objects to wrap response objects.",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"hello": {
										"type": "string"
									}
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Status message.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						},
						"x-responseValueType": "http://example.org/status"
					}
				}
			},
			"parameters": [
				{
					"$ref": "#/components/parameters/GlobalQuery"
				}
			]
		},
		"/secure": {
			"get": {
				"operationId": "getSecure",
				"description": "Used to test OAuth token being present in header.",
				"responses": {
					"200": {
						"description": "Secure message.",
						"content": {
							"application/json": {
								"schema": {
									"type": "string",
									"description": "A secure message."
								}
							}
						},
						"x-responseValueType": "http://example.org/message"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"user": {
				"type": "object",
				"description": "A user represents a natural person",
				"properties": {
					"name": {
						"type": "string",
						"description": "The legal name of a user"
					},
					"address": {
						"$ref": "#/components/schemas/address"
					},
					"employerId": {
						"type": "string",
						"description": "The identifier of the company a user works for"
					},
					"hobbies": {
						"type": "array",
						"description": "The hobbies of this user",
						"items": {
							"type": "string"
						}
					},
					"status": {
						"enum": ["staff", "contractor", "alumni"]
					},
					"nomenclature": {
						"type": "object",
						"allOf":[
							{
								"properties": {
									"suborder": {
										"type": "string"
									}
								}
							},
							{
								"properties": {
									"family": {
										"type": "string"
									}
								}
							}
						],
						"properties": {
							"genus": {
								"type": "string"
							},
							"species": {
								"type": "string"
							}
						}
					}
				},
				"required": ["name", "address", "employerId", "hobbies"]
			},
			"company": {
				"type": "object",
				"description": "A company is the employer of many users",
				"properties": {
					"id": {
						"type": "string",
						"description": "The identifier of a company"
					},
					"name": {
						"type": "string",
						"description": "The legal name of a company"
					},
					"legalForm": {
						"type": "string",
						"description": "The legal form of a company"
					},
					"ceoUsername": {
						"type": "string",
						"description": "The identifier of the user who is CEO of the company"
					},
					"offices": {
						"type": "array",
						"description": "The offices of a company",
						"items": {
							"$ref": "#/components/schemas/address"
						}
					}
				}
			},
			"address": {
				"type": "object",
				"description": "The legal address of a user",
				"properties": {
					"street": {
						"type": "string",
						"description": "The street a user lives in"
					},
					"city": {
						"type": "string",
						"description": "The city a user lives in"
					}
				}
			},
			"car": {
				"type": "object",
				"description": "A car",
				"properties": {
					"model": {
						"type": "string",
						"description": "The model of the car."
					},
					"color": {
						"type": "string",
						"description": "The color of the car."
					},
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "kind": {
            "type": "string",
            "enum": [
              "SEDAN",
              "SUV",
              "MINIVAN",
              "LIMOSINE"
            ]
          }
				}
			},
			"office": {
				"description": "An office",
				"type": "object",
				"properties": {
					"employeeId": {
						"description": "The owner ID of the office",
						"type": "string"
					},
					"room number": {
						"description": "The room number of the office",
						"type": "integer"
					},
					"employerId": {
						"type": "string",
						"description": "The identifier of the company a user works for"
					}
				}
			},
			"paper": {
				"description": "A research paper",
				"type": "object",
				"properties": {
					"name": {
						"description": "The name of the paper",
						"type": "string"
					},
					"published": {
						"description": "Whether the paper is published",
						"type": "boolean"
					}
				}
			},
			"patent-with-id": {
				"type": "object",
				"description": "A patent",
				"properties": {
					"patent-id": {
						"type": "string",
						"description": "The id of the patent"
					},
					"inventor-id": {
						"type": "string",
						"description": "The id of the inventor"
					}
				},
				"required": ["patent-name", "patent-id"]
			},
			"product-with-id": {
				"type": "object",
				"description": "A product",
				"properties": {
					"product-name": {
						"type": "string",
						"description": "The name of the product"
					},
					"product-id": {
						"type": "string",
						"description": "The id of the product"
					},
					"product-tag": {
						"type": "string",
						"description": "A tag associated with the product"
					}
				}
			},
			"project-with-id": {
				"type": "object",
				"description": "A patent",
				"properties": {
					"project-id": {
						"type": "integer",
						"description": "The id of the project"
					},
					"lead-id": {
						"type": "string",
						"description": "The id of the lead"
					},
          "active": {
            "type": "boolean",
            "description": "Whether the project is active"
					},
					"patentId": {
						"type": "string",
						"description": "The patent associated with a project if applicable"
					}
				}
			},
			"tags": {
        "type": "object",
        "title": "Tags",
        "description": "Arbitrary (string) tags describing an entity.",
        "additionalProperties": {
          "type": "string"
        }
      }
		},
		"x-links": {
			"Author": {
				"x-valueType": "http://example.org/author",
				"parameters": {
					"http://example.org/authorId": "$request.path.username"
				},
        "description": "Link between two different APIs"
      },
			"Employee": {
				"x-valueType": "http://example.org/user",
				"parameters": {
					"http://example.org/username": "$response.body#/employeeId"
				},
        "description": "Allows to fetch the user who invented a product."
			},
			"EmployerCompany": {
				"x-valueType": "http://example.org/company",
				"parameters": {
					"http://example.org/companyId": "$response.body#/employerId"
				},
        "description": "Allows to fetch the user's employer company."
			},
			"CeoUser": {
				"x-valueType": "http://example.org/user",
				"parameters": {
					"http://example.org/username": "$response.body#/ceoUsername"
				},
        "description": "Allows to fetch the company's CEO user."
			},
			"ProjectLead": {
				"x-valueType": "http://example.org/user",
				"parameters": {
					"http://example.org/username": "$response.body#/leadId"
				},
        "description": "Allows to fetch the user leading a project."
			},
			"Patent": {
				"x-valueType": "http://example.org/patent",
				"parameters": {
					"http://example.org/patentId": "$response.body#/patentId"
				},
        "description": "Allows to fetch a patent."
			},
			"Inventor": {
				"x-valueType": "http://example.org/user",
				"parameters": {
					"http://example.org/username": "$response.body#/inventorId"
				},
        "description": "Allows to fetch the user who invented a product."
			},
			"BasicLink": {
				"x-valueType": "http://example.org/copy",
				"parameters": {
					"http://example.org/query": "$request.query.query"
				}
			},
			"ConstantLink": {
				"x-valueType": "http://example.org/copy",
				"parameters": {
					"http://example.org/query": "123"
				}
			},
			"VariableLink": {
				"x-valueType": "http://example.org/copy",
				"parameters": {
					"http://example.org/query": "_{$request.query.query}_{$request.query.query}{$request.query.query}abc{$request.query.query}123"
				}
			},
			"EverythingLink": {
				"x-valueType": "http://example.org/copy",
				"parameters": {
					"http://example.org/query": "{$url}_{$method}_{$statusCode}_{$request.query.query}_{$request.header.accept}_{$response.header.connection}"
				}
			},
			"EverythingLink2": {
				"x-valueType": "http://example.org/copy",
				"parameters": {
					"http://example.org/query": "{$url}_{$method}_{$statusCode}_{$request.body}_{$request.query.query}_{$request.path.path}_{$request.header.accept}_{$response.body#/body}_{$response.query.query}_{$response.path.path}_{$response.header.connection}"
				}
			},
			"Reviews": {
				"x-valueType": "http://example.org/review",
				"parameters": {
					"http://example.org/productId": "$request.path.product-id",
					"http://example.org/productTag": "$request.query.product-tag"
				}
			},
			"ReviewsWithOperationRef": {
				"x-valueType": "http://example.org/review",
				"parameters": {
					"http://example.org/productId": "$request.path.product-id",
					"http://example.org/productTag": "$request.query.product-tag"
				}
			}
		},
		"securitySchemes": {
			"example_api_key_protocol": {
				"in": "header",
				"name": "access_token",
				"type": "apiKey"
			},
			"example_api_key_protocol_2": {
				"in": "query",
				"name": "access_token",
				"type": "apiKey"
			},
			"example_api_basic_protocol": {
				"type": "http",
				"scheme": "basic"
			}
		},
		"parameters": {
			"GlobalQuery": {
				"name": "globalquery",
				"in": "query",
				"required": true,
				"schema": {
					"type": "string"
				}
			}
		}
	},
	"security": [
	]
}
